properties([
        buildDiscarder(logRotator(numToKeepStr: '5')),
        pipelineTriggers([pollSCM('H/15 * * * *')])
])


def jobContext = [:]

node() {
    stage("Setup") {
        // generate version number
        jobContext.currentBuildVersion = sh(returnStdout: true, script: 'date +%Y%m%d%H%M%S  -u').trim()

        echo "${jobContext}"
    }
}

buildOracleJavaImages("server-jre", jobContext)
buildOracleJavaImages("jdk", jobContext)

def buildOracleJavaImages(String type, jobContext) {
    stage("Build ${type} images") {
        def versions
        def registry
        def artifactoryType = type.replaceAll('-', '')
        node() {
            sh 'curl --fail --silent --show-error --output jq https://artifactory.six-group.net/artifactory/generic-release/jq/1.5/jq-linux64 && chmod 755 jq'
            versions = findAvailableVersions(artifactoryType)
            registry = sh returnStdout: true, script: "oc get is oracle-java-${type} --template='{{ .status.dockerImageRepository }}'"
        }
        for (i = 0; i < versions.length; i++) {
            node() {
                openshiftBuild bldCfg: 'oracle-java-9-build', env: [[name: 'SIX_JAVA_VERSION', value: versions[i]], [name: 'SIX_JAVA_PACKAGE', value: artifactoryType], [name: 'SIX_BUILD_VERSION', value: jobContext.currentBuildVersion]], showBuildLogs: 'true', verbose: 'false', waitTime: '5', waitUnit: 'min'
                openshiftTag srcStream: "oracle-java-build", srcTag: 'tmp-9', destStream: "oracle-java-${type}", destTag: versions[i]
            }
            imageMgmtNode() {
                sh "skopeoCopy.sh -f ${registry}:${versions[i]} -t artifactory.six-group.net/sdbi/oracle-java-${type}-9:${versions[i]}"
                sh "promoteToArtifactory.sh -i sdbi/oracle-java-${type}-9 -t ${versions[i]} -r sdbi-docker-release-local -c"

                sh "skopeoCopy.sh -f ${registry}:${versions[i]} -t artifactory.six-group.net/sdbi/oracle-java-${type}-9:${jobContext.currentBuildVersion}"
                sh "promoteToArtifactory.sh -i sdbi/oracle-java-${type}-9 -t ${jobContext.currentBuildVersion} -r sdbi-docker-release-local -c"

                if (i == 0) {
                    sh "skopeoCopy.sh -f ${registry}:${versions[i]} -t artifactory.six-group.net/sdbi/oracle-java-${type}-9:latest"
                    sh "promoteToArtifactory.sh -i sdbi/oracle-java-${type}-9 -t latest -r sdbi-docker-release-local -c"
                }
            }
        }
    }
}


def findAvailableVersions(String type) {
    sh 'curl --fail --silent --show-error --output versions.json https://artifactory.six-group.net/artifactory/api/storage/generic-release/oracle/java/9/'
    result = sh returnStdout: true, script: "cat versions.json | ./jq -r '.children | sort_by(.uri) | reverse [] | select(.uri | contains(\"${type}-9.\")) .uri | sub(\"${type}\"; \"\") | split(\"-\")[1]| split(\"_\")[0]'"
    result.split("\n")
}


def imageMgmtNode(Closure body) {
    // we ned credentials for skopeo (copy images from openshift to artifactory) and for the artifactory promotion.
    withCredentials([usernameColonPassword(credentialsId: 'artifactory', variable: 'SKOPEO_DEST_CREDENTIALS')]) {
        withEnv(["SKOPEO_SRC_CREDENTIALS=${dockerToken()}", "ARTIFACTORY_BASIC_AUTH=${env.SKOPEO_DEST_CREDENTIALS}"]) {
            def label = 'imageMgmt-java-9'
            podTemplate(cloud: 'openshift', inheritFrom: 'maven', label: label,
                    containers: [containerTemplate(
                            name: 'jnlp',
                            image: 'artifactory.six-group.net/sdbi/jenkins-slave-image-mgmt',
                            alwaysPullImage: true,
                            args: '${computer.jnlpmac} ${computer.name}',
                            workingDir: '/tmp')]
            ) {
                node(label) {
                    body.call()
                }
            }
        }
    }
}


def dockerToken(String login = "serviceaccount") {
    node() {
        // Read the auth token from the file defined in the env variable AUTH_TOKEN
        String token = sh returnStdout: true, script: 'cat ${AUTH_TOKEN}'
        String prefix
        if (login) {
            prefix = "${login}:"
        } else {
            prefix = ''
        }
        return prefix + token
    }
}